name: 'Automated Versioning and Latest Tag Update'

on:
  push:
    branches:
      - main # main 브랜치에 푸시될 때 실행

jobs:
  versioning:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Get the current version
        id: get_version
        run: |
          VERSION=$(cat VERSION)  # 현재 버전을 VERSION 파일에서 읽어옴
          echo "Current version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_ENV

      - name: Increment version number
        id: increment_version
        run: |
          # 버전 번호를 증가시키는 로직 (마지막 패치 버전을 1 증가시킴)
          NEW_VERSION=$(echo "${{ env.version }}" | awk -F. -v OFS=. '{$NF += 1 ; print}')
          echo "New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_ENV

      - name: Update VERSION file and commit
        run: |
          echo "${{ env.new_version }}" > VERSION
          git add VERSION
          git commit -m "Bump version to ${{ env.new_version }}"
          git push origin main

      - name: Create and push new tag
        run: |
          git tag "v${{ env.new_version }}"
          git push origin "v${{ env.new_version }}"

      - name: Update v1 tag to point to the latest version
        run: |
          git tag -d v1 || true  # 기존 v1 태그 삭제
          git tag v1 ${{ github.sha }}  # 새로운 커밋에 v1 태그 추가
          git push origin v1 --force  # v1 태그 강제 푸시

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: 'v${{ env.new_version }}'
          release_name: 'v${{ env.new_version }}'
          body: 'Release notes for version v${{ env.new_version }}'
          draft: false
          prerelease: false

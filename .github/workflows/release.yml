name: 'Automated Versioning and Latest Tag Update'

on:
  push:
    branches:
      - main # Execute when there is a push to the main branch

jobs:
  versioning:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Get the current version
        id: get_version
        run: |
          VERSION=$(cat VERSION)  # Read the current version from the VERSION file
          echo "Current version: $VERSION"
          echo "version=\"$VERSION\"" >> $GITHUB_ENV  # Double quote the version

      - name: Increment version number
        id: increment_version
        run: |
          # Increment version number (increment the patch version)
          NEW_VERSION=$(echo "${{ env.version }}" | awk -F. -v OFS=. '{$NF += 1 ; print}')
          echo "New version: $NEW_VERSION"
          echo "new_version=\"$NEW_VERSION\"" >> $GITHUB_ENV  # Double quote the new version

      - name: Update VERSION file and commit
        run: |
          echo "${{ env.new_version }}" > VERSION
          git add VERSION
          git commit -m "Bump version to \"${{ env.new_version }}\""  # Double quote the version in commit message
          git push origin main

      - name: Create and push new tag
        run: |
          git tag "v${{ env.new_version }}"  # Ensure the new version tag is quoted
          git push origin "v${{ env.new_version }}"  # Double quote the tag name

      - name: Update v1 tag to point to the latest version
        run: |
          git tag -d v1 || true  # Delete the existing v1 tag if it exists
          git tag v1 "${{ github.sha }}"  # Add the new v1 tag, quoting the SHA
          git push origin v1 --force  # Force push the updated v1 tag

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ env.new_version }}"  # Ensure the new version tag is quoted
          release_name: "v${{ env.new_version }}"  # Ensure the release name is quoted
          body: "Release notes for version v${{ env.new_version }}"  # Ensure the release notes are quoted
          draft: false
          prerelease: false
